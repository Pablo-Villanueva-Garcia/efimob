{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst hostname = 'http://localhost:8000';\n/*El options nos permite aplicar los headers a las llamadas asegurandonos de que nuestra comunicacion\r\nes en JSON */\n\nconst options = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Accepts': 'application/json'\n  }\n}; //como se repite la misma estructura practicamente en todos los procesos hemos creado un UseGET con ella\n\nconst UseGet = () => {\n  _s();\n\n  const [response, setResponse] = useState();\n  useEffect(() => {\n    fetch('http://localhost:8000/recipes', {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n    });\n  }, []);\n  return response;\n}; //componente que se comunica con el backend de express para traernos el contenido por get\n//en un porceso posterior al implementar el buscador de keywords necesitaramos pasar parametros adicionales\n\n\n_s(UseGet, \"WYJMalD1OXyA3NQCMZtroVUOh7E=\");\n\n_c = UseGet;\nexport const UseGetRecipesList = keywords => {\n  _s2();\n\n  let url = '/recipes';\n\n  if (keywords) {\n    url + '?keywords' + keywords;\n  }\n  /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\n  y un useeffect para ejecutar el fetch y dando el valor de la response al set */\n\n\n  const [response, setResponse] = useState();\n  useEffect(() => {\n    fetch('http://localhost:8000/recipes', {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n    });\n  }, []);\n  return response;\n};\n\n_s2(UseGetRecipesList, \"WYJMalD1OXyA3NQCMZtroVUOh7E=\");\n\n_c2 = UseGetRecipesList;\nexport const UseRecipe = id => {\n  _s3();\n\n  /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\n  y un useeffect para ejecutar el fetch y dando el valor de la response al set \r\n  En este segundo caso usamos la id para traernos una receta en concreto por su identificador */\n  const [response, setResponse] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:8000/recipes/' + id, {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n    });\n  }, [id]);\n  return response;\n}; //Como el body lo recibimos desde el formulario el retorno del valor no vendra dado en la funcion sino como parametro de retorno\n\n_s3(UseRecipe, \"PPdBA4WNWUy55EY/yE+UpOAsHy0=\");\n\n_c3 = UseRecipe;\nexport const UseCreateRecipe = () => {\n  _s4();\n\n  const [loading, setloading] = useState(false);\n  return {\n    createRecipes: body => {\n      setloading(true);\n      return fetch('http://localhost:8000/recipes/', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n}; //HOOK EDIT \n\n_s4(UseCreateRecipe, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c4 = UseCreateRecipe;\nexport const UseEditRecipe = id => {\n  _s5();\n\n  const [loading, setloading] = useState(false);\n  return {\n    editRecipes: body => {\n      setloading(true);\n      return fetch('http://localhost:8000/recipes/' + id, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n};\n\n_s5(UseEditRecipe, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c5 = UseEditRecipe;\nexport const UseDeleteRecipe = id => {\n  return () => fetch('http://localhost:8000/recipes/' + id, {\n    method: 'DELETE'\n  });\n};\n_c6 = UseDeleteRecipe;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"UseGet\");\n$RefreshReg$(_c2, \"UseGetRecipesList\");\n$RefreshReg$(_c3, \"UseRecipe\");\n$RefreshReg$(_c4, \"UseCreateRecipe\");\n$RefreshReg$(_c5, \"UseEditRecipe\");\n$RefreshReg$(_c6, \"UseDeleteRecipe\");","map":{"version":3,"sources":["C:/Pablo/proyectosmaster/SEMANA 7/FRONTEND USE DATABASES RECIPES WEEK 6 (victor)/frontrecipes/src/hooks/api/index.js"],"names":["useEffect","useState","hostname","options","headers","UseGet","response","setResponse","fetch","method","then","json","UseGetRecipesList","keywords","url","UseRecipe","id","UseCreateRecipe","loading","setloading","createRecipes","body","JSON","stringify","UseEditRecipe","editRecipes","UseDeleteRecipe"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst hostname = 'http://localhost:8000';\r\n/*El options nos permite aplicar los headers a las llamadas asegurandonos de que nuestra comunicacion\r\nes en JSON */\r\nconst options = {\r\n    headers:{\r\n        'Content-Type':'application/json',\r\n        'Accepts':'application/json',\r\n    }\r\n}\r\n//como se repite la misma estructura practicamente en todos los procesos hemos creado un UseGET con ella\r\n\r\nconst UseGet = () =>{\r\n    const [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch('http://localhost:8000/recipes',\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[]);\r\n    return response;\r\n}\r\n\r\n//componente que se comunica con el backend de express para traernos el contenido por get\r\n\r\n//en un porceso posterior al implementar el buscador de keywords necesitaramos pasar parametros adicionales\r\n\r\nexport const UseGetRecipesList = (keywords) => {\r\n    let url = '/recipes';\r\n    if(keywords){\r\n        url+ '?keywords' + keywords;\r\n    }\r\n   /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\ny un useeffect para ejecutar el fetch y dando el valor de la response al set */\r\nconst [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch('http://localhost:8000/recipes',\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[]);\r\n    return response;\r\n}\r\n\r\n\r\nexport const UseRecipe = (id) => {\r\n    /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\n y un useeffect para ejecutar el fetch y dando el valor de la response al set \r\n En este segundo caso usamos la id para traernos una receta en concreto por su identificador */\r\n \r\n const [response,setResponse]=useState({});\r\n useEffect ( () => {\r\n         fetch('http://localhost:8000/recipes/'+ id,\r\n         {\r\n             method:'GET',\r\n             ...options,\r\n         }).then(response => response.json())\r\n         .then(response => {\r\n             setResponse(response);  \r\n         })\r\n     },[id]);\r\n     \r\n     return response;\r\n}\r\n//Como el body lo recibimos desde el formulario el retorno del valor no vendra dado en la funcion sino como parametro de retorno\r\nexport const UseCreateRecipe = () => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        createRecipes: (body) => {\r\n            setloading(true);\r\n            return fetch('http://localhost:8000/recipes/',{\r\n                method:'POST',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n \r\n//HOOK EDIT \r\n\r\nexport const UseEditRecipe = (id) => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        editRecipes: (body) => {\r\n            setloading(true);\r\n            return fetch('http://localhost:8000/recipes/'+ id,{\r\n                method:'PUT',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n\r\n\r\n\r\nexport const UseDeleteRecipe = (id) => {\r\n return () => \r\n  fetch('http://localhost:8000/recipes/'+ id,\r\n    {\r\n     method:'DELETE',\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}