{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst hostname = 'http://localhost:8000';\n/*El options nos permite aplicar los headers a las llamadas asegurandonos de que nuestra comunicacion\r\nes en JSON */\n\nconst options = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Accepts': 'application/json'\n  }\n};\n/*como se repite la misma estructura practicamente en todos los procesos hemos \r\ncreado un UseGET con ella*/\n\n/*\r\nexport const UseGet = (url) =>{\r\n    const [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch(hostname + url,\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[url]);\r\n    \r\n    return response;\r\n}\r\n*/\n//mejora del useget\n\nexport const UseGet = url => {\n  _s();\n\n  const [response, setResponse] = useState();\n  const [loading, setloading] = useState(true);\n  const [error, seterror] = useState();\n  useEffect(() => {\n    setloading(true);\n    fetch(hostname + url, {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n      setloading(false);\n    }).catch(error => {\n      setloading(false);\n      seterror(error);\n    });\n  }, [url]);\n  return {\n    response,\n    loading,\n    error\n  };\n};\n/* 1* uso del get sin el useget para tener como referencia */\n\n/*\r\nexport const UseGetRecipesList = () => {\r\nLa forma mas basica de traernos el contenido de la api es utilizando un usestate \r\npara recoger valores y  un useeffect para ejecutar el fetch y dando el valor de \r\nla response al set \r\n\r\nconst [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch('http://localhost:8000/recipes',\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[]);\r\n    return response;\r\n}\r\n\r\n*/\n//GET usando useget y implementando el buscador de keywords\n\n/*2 uso del useget en get recipes export const UseGetRecipesList = () => UseGet('/recipes');\r\n}\r\nexport const UseGetRecipesList = (keywords) =>{\r\n    let url = '/recipes';\r\n    if(keywords){\r\n     url =  url + '?keywords=' + keywords;\r\n    }\r\n    return UseGet(url);\r\n}\r\n*/\n//3* uso del usegetrecipes para trabajar correctamente con las urls y gestion de errores \n\n_s(UseGet, \"kNXTzMmKNUGxr+lunqLwNxErO9s=\");\n\n_c = UseGet;\nexport const UseGetRecipesList = keywords => {\n  let url = '/recipes'; //metodo elaborado usando Object ,encode y reduce\n  //const querystring = Object.keys(listparams).map(key => key +'='+ encodeURIComponent(listparams[key])).redude((a,b) => a +'&'+ b)\n\n  /*el const params recomponemos el objeto , primero sacamos las claves , segundo en un filter excluimos las undefined\r\n   tercero tenemos las claves que no son undefined , necesitamos el objeto entero denuevo por lo que usamos el reduce \r\n   a la derecha de todo tenemos el objeto vacio ,y por cada clave que seria prev ponme la clave y dame el valor  */\n\n  const params = Object.keys(keywords).filter(key => keywords[key] !== undefined).reduce((prev, next) => ({ ...prev,\n    [next]: keywords[next]\n  }), {}); //Metodo estandarizado usando urlsearchparams\n\n  const querystring = new URLSearchParams(params).toString();\n\n  if (querystring) {\n    url = url + '?' + querystring;\n  }\n\n  return UseGet(url);\n};\n_c2 = UseGetRecipesList;\nexport const UseRecipe = id => {\n  _s2();\n\n  /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\n  y un useeffect para ejecutar el fetch y dando el valor de la response al set \r\n  En este segundo caso usamos la id para traernos una receta en concreto por su identificador */\n  const [response, setResponse] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:8000/recipes/' + id, {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n    });\n  }, [id]);\n  return response;\n}; //Como el body lo recibimos desde el formulario el retorno del valor no vendra dado en la funcion sino como parametro de retorno\n\n_s2(UseRecipe, \"PPdBA4WNWUy55EY/yE+UpOAsHy0=\");\n\n_c3 = UseRecipe;\nexport const UseCreateRecipe = () => {\n  _s3();\n\n  const [loading, setloading] = useState(false);\n  return {\n    createRecipes: body => {\n      setloading(true);\n      return fetch('http://localhost:8000/recipes/', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n}; //HOOK EDIT \n\n_s3(UseCreateRecipe, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c4 = UseCreateRecipe;\nexport const UseEditRecipe = id => {\n  _s4();\n\n  const [loading, setloading] = useState(false);\n  return {\n    editRecipes: body => {\n      setloading(true);\n      return fetch('http://localhost:8000/recipes/' + id, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n};\n\n_s4(UseEditRecipe, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c5 = UseEditRecipe;\nexport const UseDeleteRecipe = id => {\n  return () => fetch('http://localhost:8000/recipes/' + id, {\n    method: 'DELETE'\n  });\n};\n_c6 = UseDeleteRecipe;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"UseGet\");\n$RefreshReg$(_c2, \"UseGetRecipesList\");\n$RefreshReg$(_c3, \"UseRecipe\");\n$RefreshReg$(_c4, \"UseCreateRecipe\");\n$RefreshReg$(_c5, \"UseEditRecipe\");\n$RefreshReg$(_c6, \"UseDeleteRecipe\");","map":{"version":3,"sources":["C:/Pablo/proyectosmaster/SEMANA 7/FRONTEND USE DATABASES RECIPES WEEK 6 (victor)/frontrecipes/src/hooks/api/index.js"],"names":["useEffect","useState","hostname","options","headers","UseGet","url","response","setResponse","loading","setloading","error","seterror","fetch","method","then","json","catch","UseGetRecipesList","keywords","params","Object","keys","filter","key","undefined","reduce","prev","next","querystring","URLSearchParams","toString","UseRecipe","id","UseCreateRecipe","createRecipes","body","JSON","stringify","UseEditRecipe","editRecipes","UseDeleteRecipe"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst hostname = 'http://localhost:8000';\r\n/*El options nos permite aplicar los headers a las llamadas asegurandonos de que nuestra comunicacion\r\nes en JSON */\r\nconst options = {\r\n    headers:{\r\n        'Content-Type':'application/json',\r\n        'Accepts':'application/json',\r\n    }\r\n}\r\n/*como se repite la misma estructura practicamente en todos los procesos hemos \r\ncreado un UseGET con ella*/\r\n/*\r\nexport const UseGet = (url) =>{\r\n    const [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch(hostname + url,\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[url]);\r\n    \r\n    return response;\r\n}\r\n*/\r\n\r\n//mejora del useget\r\n\r\nexport const UseGet = (url) =>{\r\n    const [response,setResponse]=useState();\r\n    const [loading,setloading]=useState(true);\r\n    const [error,seterror]=useState();\r\nuseEffect ( () => {\r\n        setloading(true);\r\n        fetch(hostname + url,\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            setloading(false);\r\n        }).catch(error=>{\r\n            setloading(false);\r\n            seterror(error);\r\n        })\r\n    },[url]);\r\n    \r\n    return {\r\n        response,\r\n        loading,\r\n        error,\r\n    }\r\n}\r\n\r\n/* 1* uso del get sin el useget para tener como referencia */\r\n/*\r\nexport const UseGetRecipesList = () => {\r\nLa forma mas basica de traernos el contenido de la api es utilizando un usestate \r\npara recoger valores y  un useeffect para ejecutar el fetch y dando el valor de \r\nla response al set \r\n\r\nconst [response,setResponse]=useState();\r\nuseEffect ( () => {\r\n        fetch('http://localhost:8000/recipes',\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            \r\n        })\r\n    },[]);\r\n    return response;\r\n}\r\n\r\n*/\r\n\r\n//GET usando useget y implementando el buscador de keywords\r\n/*2 uso del useget en get recipes export const UseGetRecipesList = () => UseGet('/recipes');\r\n}\r\nexport const UseGetRecipesList = (keywords) =>{\r\n    let url = '/recipes';\r\n    if(keywords){\r\n     url =  url + '?keywords=' + keywords;\r\n    }\r\n    return UseGet(url);\r\n}\r\n*/\r\n//3* uso del usegetrecipes para trabajar correctamente con las urls y gestion de errores \r\n\r\nexport const UseGetRecipesList = (keywords) =>{\r\n    let url = '/recipes';\r\n  \r\n    //metodo elaborado usando Object ,encode y reduce\r\n    //const querystring = Object.keys(listparams).map(key => key +'='+ encodeURIComponent(listparams[key])).redude((a,b) => a +'&'+ b)\r\n    \r\n    /*el const params recomponemos el objeto , primero sacamos las claves , segundo en un filter excluimos las undefined\r\n     tercero tenemos las claves que no son undefined , necesitamos el objeto entero denuevo por lo que usamos el reduce \r\n     a la derecha de todo tenemos el objeto vacio ,y por cada clave que seria prev ponme la clave y dame el valor  */\r\n     const params = Object.keys(keywords)\r\n     .filter(key=>keywords[key] !==undefined)\r\n     .reduce((prev ,next) => ({...prev,[next]:keywords[next]}),{});\r\n     \r\n     //Metodo estandarizado usando urlsearchparams\r\n     const querystring = new URLSearchParams(params).toString();\r\n    \r\n    if(querystring){\r\n     url =  url + '?' + querystring;\r\n    \r\n    }\r\n    return UseGet(url);\r\n}\r\n\r\n\r\nexport const UseRecipe = (id) => {\r\n    /*La forma mas basica de traernos el contenido de la api es utilizando un usestate para recoger valores y \r\n y un useeffect para ejecutar el fetch y dando el valor de la response al set \r\n En este segundo caso usamos la id para traernos una receta en concreto por su identificador */\r\n \r\n const [response,setResponse]=useState({});\r\n useEffect ( () => {\r\n         fetch('http://localhost:8000/recipes/'+ id,\r\n         {\r\n             method:'GET',\r\n             ...options,\r\n         }).then(response => response.json())\r\n         .then(response => {\r\n             setResponse(response);  \r\n         })\r\n     },[id]);\r\n     \r\n     return response;\r\n}\r\n//Como el body lo recibimos desde el formulario el retorno del valor no vendra dado en la funcion sino como parametro de retorno\r\nexport const UseCreateRecipe = () => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        createRecipes: (body) => {\r\n            setloading(true);\r\n            return fetch('http://localhost:8000/recipes/',{\r\n                method:'POST',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n \r\n//HOOK EDIT \r\n\r\nexport const UseEditRecipe = (id) => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        editRecipes: (body) => {\r\n            setloading(true);\r\n            return fetch('http://localhost:8000/recipes/'+ id,{\r\n                method:'PUT',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n\r\n\r\n\r\nexport const UseDeleteRecipe = (id) => {\r\n return () => \r\n  fetch('http://localhost:8000/recipes/'+ id,\r\n    {\r\n     method:'DELETE',\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}