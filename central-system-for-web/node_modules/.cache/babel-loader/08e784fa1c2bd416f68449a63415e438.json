{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst hostname = 'http://localhost:8000';\nconst options = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Accepts': 'application/json'\n  }\n};\nexport const UseGet = url => {\n  _s();\n\n  const [response, setResponse] = useState();\n  const [loading, setloading] = useState(true);\n  const [error, seterror] = useState();\n  useEffect(() => {\n    setloading(true);\n    fetch(hostname + url, {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n      setloading(false);\n    }).catch(error => {\n      setloading(false);\n      seterror(error);\n    });\n  }, [url]);\n  return {\n    response,\n    loading,\n    error\n  };\n};\n\n_s(UseGet, \"kNXTzMmKNUGxr+lunqLwNxErO9s=\");\n\n_c = UseGet;\nexport const UseGetOrganizationList = listParams => {\n  let url = '/organization';\n  const params = Object.keys(listParams).filter(key => listParams[key] !== undefined).reduce((prev, next) => ({ ...prev,\n    [next]: listParams[next]\n  }), {});\n  const querystring = new URLSearchParams(params).toString();\n\n  if (querystring) {\n    url = url + '?' + querystring;\n  }\n\n  return UseGet(url);\n};\n_c2 = UseGetOrganizationList;\nexport const UseOrganization = id => {\n  _s2();\n\n  const [response, setResponse] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:8000/organization/' + id, {\n      method: 'GET',\n      ...options\n    }).then(response => response.json()).then(response => {\n      setResponse(response);\n    });\n  }, [id]);\n  return response;\n};\n\n_s2(UseOrganization, \"PPdBA4WNWUy55EY/yE+UpOAsHy0=\");\n\n_c3 = UseOrganization;\nexport const UseCreateOrganization = () => {\n  _s3();\n\n  const [loading, setloading] = useState(false);\n  return {\n    createorganization: body => {\n      setloading(true);\n      return fetch(hostname + '/organization/', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n}; //HOOK EDIT \n\n_s3(UseCreateOrganization, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c4 = UseCreateOrganization;\nexport const UseEditOrganization = id => {\n  _s4();\n\n  const [loading, setloading] = useState(false);\n  return {\n    editorganization: body => {\n      setloading(true);\n      return fetch(hostname + '/organization/' + id, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        ...options\n      }).then(response => response.json()).then(response => {\n        setloading(false);\n        return response;\n      });\n    },\n    loading\n  };\n};\n\n_s4(UseEditOrganization, \"cN4OSKerpuIxwcw0ITosEp2MRVA=\");\n\n_c5 = UseEditOrganization;\nexport const UseDeleteOrganization = id => {\n  return () => fetch(hostname + '/organization/' + id, {\n    method: 'DELETE'\n  });\n};\n_c6 = UseDeleteOrganization;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"UseGet\");\n$RefreshReg$(_c2, \"UseGetOrganizationList\");\n$RefreshReg$(_c3, \"UseOrganization\");\n$RefreshReg$(_c4, \"UseCreateOrganization\");\n$RefreshReg$(_c5, \"UseEditOrganization\");\n$RefreshReg$(_c6, \"UseDeleteOrganization\");","map":{"version":3,"sources":["/home/pablovg/Documentos/EFIMOB/frontend/src/hooks/api/index.js"],"names":["useEffect","useState","hostname","options","headers","UseGet","url","response","setResponse","loading","setloading","error","seterror","fetch","method","then","json","catch","UseGetOrganizationList","listParams","params","Object","keys","filter","key","undefined","reduce","prev","next","querystring","URLSearchParams","toString","UseOrganization","id","UseCreateOrganization","createorganization","body","JSON","stringify","UseEditOrganization","editorganization","UseDeleteOrganization"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst hostname = 'http://localhost:8000';\r\n\r\nconst options = {\r\n    headers:{\r\n        'Content-Type':'application/json',\r\n        'Accepts':'application/json',\r\n    }\r\n}\r\n\r\nexport const UseGet = (url) =>{\r\n    const [response,setResponse]=useState();\r\n    const [loading,setloading]=useState(true);\r\n    const [error,seterror]=useState();\r\n\r\nuseEffect ( () => {\r\n        setloading(true);\r\n        fetch(hostname + url,\r\n        {\r\n            method:'GET',\r\n            ...options,\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            setResponse(response);\r\n            setloading(false);\r\n        }).catch(error=>{\r\n            setloading(false);\r\n            seterror(error);\r\n        })\r\n    },[url]);\r\n \r\n    \r\n    return {\r\n        response,\r\n        loading,\r\n        error,\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const UseGetOrganizationList = (listParams) =>{\r\n    let url = '/organization';\r\n  \r\n\r\n     const params = Object.keys(listParams)\r\n     .filter(key=>listParams[key] !==undefined)\r\n     .reduce((prev ,next) => ({...prev,[next]:listParams[next]}),{});\r\n     \r\n \r\n     const querystring = new URLSearchParams(params).toString();\r\n\r\n    if(querystring){\r\n     url =  url + '?' + querystring;\r\n    \r\n    }\r\n    return UseGet(url);\r\n}\r\n\r\n\r\nexport const UseOrganization = (id) => {\r\n \r\n \r\n const [response,setResponse]=useState({});\r\n useEffect ( () => {\r\n         fetch('http://localhost:8000/organization/'+ id,\r\n         {\r\n             method:'GET',\r\n             ...options,\r\n         }).then(response => response.json())\r\n         .then(response => {\r\n             setResponse(response);  \r\n         })\r\n     },[id]);\r\n     \r\n     return response;\r\n}\r\n\r\nexport const UseCreateOrganization = () => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        createorganization: (body) => {\r\n            setloading(true);\r\n            return fetch(hostname +'/organization/',{\r\n                method:'POST',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n \r\n//HOOK EDIT \r\n\r\nexport const UseEditOrganization = (id) => {\r\n    const [loading,setloading]= useState(false);\r\n    return {\r\n        editorganization: (body) => {\r\n            setloading(true);\r\n            return fetch(hostname +'/organization/'+ id,{\r\n                method:'PUT',\r\n                body:JSON.stringify(body),\r\n                ...options,\r\n                }).then(response => response.json())\r\n                .then(response =>{\r\n                    setloading(false);\r\n                    return response;\r\n                })\r\n        },\r\n        loading,\r\n    }   \r\n}\r\n\r\n\r\n\r\n\r\nexport const UseDeleteOrganization = (id) => {\r\n return () => \r\n  fetch(hostname +'/organization/'+ id,\r\n    {\r\n     method:'DELETE',\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}